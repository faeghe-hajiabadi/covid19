{"version":3,"sources":["component/Map/Map.js","api/utilities.js","api/fetchData.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","map","backgroundColor","zoomOnScroll","containerStyle","width","height","onRegionClick","handleClick","containerClassName","regionStyle","initial","fill","stroke","hover","cursor","selected","selectedHover","regionsSelectable","onRegionTipShow","e","el","code","data","mapData","html","series","regions","values","scale","normalizeFunction","url","a","console","log","fetch","res","json","fetchData","countryCode","App","useState","location","setLocation","count","useEffect","then","locations","forEach","item","country_code","latest","confirmed","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sNAGe,SAASA,EAAIC,GAE1B,OACE,6BACE,kBAAC,YAAD,CACEC,IAAK,aACLC,gBAAgB,cAChBC,cAAc,EACdC,eAAgB,CACdC,MAAO,OACPC,OAAQ,SAEVC,cAAeP,EAAMQ,YACrBC,mBAAmB,MACnBC,YAAa,CACXC,QAAS,CACPC,KAAM,UACN,eAAgB,GAChBC,OAAQ,OACR,eAAgB,EAChB,iBAAkB,GAEpBC,MAAO,CACL,eAAgB,GAChBC,OAAQ,WAEVC,SAAU,CACRJ,KAAM,WAERK,cAAe,IAEjBC,mBAAmB,EACnBC,gBAAiB,SAACC,EAAGC,EAAIC,GACvB,IAAMC,EAAOvB,EAAMwB,QAAQF,GAC3B,OAAOD,EAAGI,KACR,MACEJ,EAAGI,OACH,sCAECF,GAAc,KAGrBG,OAAQ,CACNC,QAAS,CACP,CACEC,OAAQ5B,EAAMwB,QACdK,MAAO,CAAC,UAAW,WACnBC,kBAAmB,mBClDzB,I,mECCR,WAAyBC,GAAzB,eAAAC,EAAA,6DACIC,QAAQC,IAAI,iBADhB,SAEsBC,MAAMJ,GAF5B,cAEUK,EAFV,yBAGWA,EAAIC,QAHf,4C,sBAOgBC,M,4CCAVd,EAAU,GACVhB,EAAc,SAACY,EAAGmB,GACtBN,QAAQC,IAAIK,IA2BCC,MAxBf,WAAgB,IAAD,EACmBC,qBADnB,mBACNC,EADM,KACIC,EADJ,OAEkBF,qBAFlB,gCAGaA,mBAAS,IAHtB,mBAGNG,EAHM,KAiBb,OAjBa,KAKbC,qBAAU,WACYP,EFnBJ,8DEmBmBQ,MAAK,SAAAV,GAAG,OAAIO,EAAYP,QAC1D,CAACQ,IAGFF,GACEA,EAASK,WACTL,EAASK,UAAUC,SAAQ,SAAAC,GACzBzB,EAAQyB,EAAKC,cAAgBD,EAAKE,OAAOC,aAK7C,6BACE,kBAACrD,EAAD,CAAKS,YAAaA,EAAagB,QAASA,MCpB1B6B,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.7ada26b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\n\nexport default function Map(props) {\n  // const mapNumber =\n  return (\n    <div>\n      <VectorMap\n        map={\"world_mill\"}\n        backgroundColor=\"transparent\" //change it to ocean blue: #0077be\n        zoomOnScroll={false}\n        containerStyle={{\n          width: \"100%\",\n          height: \"520px\"\n        }}\n        onRegionClick={props.handleClick} //gets the country code\n        containerClassName=\"map\"\n        regionStyle={{\n          initial: {\n            fill: \"#e4e4e4\",\n            \"fill-opacity\": 0.9,\n            stroke: \"none\",\n            \"stroke-width\": 0,\n            \"stroke-opacity\": 0\n          },\n          hover: {\n            \"fill-opacity\": 0.8,\n            cursor: \"pointer\"\n          },\n          selected: {\n            fill: \"#2938bc\" //color for the clicked country\n          },\n          selectedHover: {}\n        }}\n        regionsSelectable={true}\n        onRegionTipShow={(e, el, code) => {\n          const data = props.mapData[code];\n          return el.html(\n            \"<b>\" +\n              el.html() +\n              \"</b></br>\" +\n              \"<b> confirmed cases: </b>\" +\n              (data ? data : 0)\n          );\n        }}\n        series={{\n          regions: [\n            {\n              values: props.mapData, //this is your data\n              scale: [\"#FEE5D9\", \"#A50F15\"], //your color game's here\n              normalizeFunction: \"polynomial\"\n            }\n          ]\n        }}\n      />\n    </div>\n  );\n}\n","export  const url = \"https://coronavirus-tracker-api.herokuapp.com/v2/locations\";\n","\nasync function fetchData(url) {\n    console.log(\"this is fetch\")\n    const res = await fetch(url);\n    return res.json()\n      \n  }\n\n export default fetchData; ","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport Map from './component/Map/Map';\nimport { url } from \"./api/utilities\";\nimport fetchData from \"./api/fetchData\";\n\n\nconst mapData = {};\nconst handleClick = (e, countryCode) => {\n  console.log(countryCode);\n};\n\nfunction App() {\n  const [location, setLocation] = useState();\n  const [hasErrors, setErrors] = useState();\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const resultFetch = fetchData(url).then(res => setLocation(res));\n  }, [count]);\n\n  {\n    location &&\n      location.locations &&\n      location.locations.forEach(item => {\n        mapData[item.country_code] = item.latest.confirmed;\n      });\n  }\n\n  return (\n    <div>\n      <Map handleClick={handleClick} mapData={mapData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}